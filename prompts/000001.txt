Find the bugs in my opengl program that are causing it to render completely black, and not showing my cube model:

Here's the main method:

	// Enable depth testing
	gl.Enable(gl.DEPTH_TEST)
	gl.DepthFunc(gl.LESS)

	// Enable backface culling
	gl.Enable(gl.CULL_FACE)
	gl.CullFace(gl.BACK)
	gl.FrontFace(gl.CCW)

	// Enable blending
	gl.Enable(gl.BLEND)
	gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)

	// Enable multisampling
	gl.Enable(gl.MULTISAMPLE)

	scene, err := NewScene(window)

	camera := scene.CreateCamera(
		mgl32.Vec3{0, 0, -15},
		mgl32.Vec3{0, 0, 15},
		mgl32.Vec3{0, 1, 0},
	)
	scene.Camera = camera

	renderer := NewForwardRenderer(window, camera)
	scene.SetRenderer(&renderer)

	scene.AddObject(&GameObject{
		Position: mgl32.Vec3{0.0, 0.0, 15.0},
		Rotation: QuatIdent,
		Velocity: mgl32.Vec3{},
		Scale:    1.0,
		Mass:     3,
		Mesh:     meshes.NewCube(5),
		Material: NewBasicMaterial(),
	})

	// Initialize the last frame time
	var lastFrameTime float64 = 0.0
	for !window.ShouldClose() {

		// Render the objects in the scene
		scene.Render(camera)

		// Swap buffers
		window.SwapBuffers()
	}

Here's the shader setup code:

type ShaderProgram struct {
	program                uint32
	UniformLocationCache   map[string]uint32
	AttribLocationCache    map[string]uint32
	shaderReferenceTracker int64
}

func (s *ShaderProgram) GetUniformLocation(name string) uint32 {

	if s.UniformLocationCache == nil {
		s.UniformLocationCache = make(map[string]uint32)
	}

	if loc, ok := s.UniformLocationCache[name]; ok {
		return loc
	}

	loc := gl.GetUniformLocation(s.program, gl.Str(name+"\x00"))
	if loc == -1 {
		fmt.Printf("Could not find uniform %s", name)
	} else {
		s.UniformLocationCache[name] = uint32(loc)
	}
	return uint32(loc)
}

func (s *ShaderProgram) GetAttribLocation(name string) uint32 {

	if s.AttribLocationCache == nil {
		s.AttribLocationCache = make(map[string]uint32)
	}

	if loc, ok := s.AttribLocationCache[name]; ok {
		return loc
	}

	loc := gl.GetAttribLocation(s.program, gl.Str(name+"\x00"))
	if loc == -1 {
		fmt.Printf("Could not find attrib %s", name)
	} else {
		s.AttribLocationCache[name] = uint32(loc)
	}
	return uint32(loc)
}

func (s *ShaderProgram) SetFloat32UniformLocation(key string, value *float32) {
	loc := s.GetUniformLocation(key)
	gl.UniformMatrix4fv(int32(loc), 1, false, value)
}

func (s *ShaderProgram) SetMat4UniformLocation(key string, value *mgl32.Mat4) {
	loc := s.GetUniformLocation(key)
	gl.UniformMatrix4fv(int32(loc), 1, false, &value[0])
}

func (s *ShaderProgram) SetVec3UniformLocation(key string, value *float32) {
	loc := s.GetUniformLocation(key)
	gl.Uniform3fv(int32(loc), 1, value)
}

func (s *ShaderProgram) SetFloatUniformLocation(key string, value float32) {
	loc := s.GetUniformLocation(key)
	gl.Uniform1f(int32(loc), value)
}

func (s *ShaderProgram) SetIntUniformLocation(key string, value int32) {
	loc := s.GetUniformLocation(key)
	gl.Uniform1i(int32(loc), value)
}

func (s *ShaderProgram) SetFloat32AttribLocation(key string, value *float32) {
	loc := s.GetAttribLocation(key)
	gl.UniformMatrix4fv(int32(loc), 1, false, value)
}

func (s *ShaderProgram) SetMat4AttribLocation(key string, value *mgl32.Mat4) {
	loc := s.GetAttribLocation(key)
	gl.UniformMatrix4fv(int32(loc), 1, false, &value[0])
}

func (s *ShaderProgram) SetVec3AttribLocation(key string, value *float32) {
	loc := s.GetAttribLocation(key)
	gl.Uniform3fv(int32(loc), 1, value)
}

func (s *ShaderProgram) SetFloatAttribLocation(key string, value float32) {
	loc := s.GetAttribLocation(key)
	gl.Uniform1f(int32(loc), value)
}

func (s *ShaderProgram) SetIntAttribLocation(key string, value int32) {
	loc := s.GetAttribLocation(key)
	gl.Uniform1i(int32(loc), value)
}

func LoadShader(vertShader string, fragShader string) *ShaderProgram {
	shaderProgram, err := NewShaderProgram(vertShader, fragShader)

	return shaderProgram
}

type getGlParam func(uint32, uint32, *int32)
type getInfoLog func(uint32, int32, *int32, *uint8)

func checkGlError(glObject uint32, errorParam uint32, getParamFn getGlParam,
	getInfoLogFn getInfoLog, failMsg string) {

	var success int32
	getParamFn(glObject, errorParam, &success)
	if success != 1 {
		var infoLog [512]byte
		getInfoLogFn(glObject, 512, nil, (*uint8)(unsafe.Pointer(&infoLog)))
		log.Fatalln(failMsg, "\n", string(infoLog[:512]))
	}
}

func checkShaderCompileErrors(shader uint32) {
	checkGlError(shader, gl.COMPILE_STATUS, gl.GetShaderiv, gl.GetShaderInfoLog,
		"ERROR::SHADER::COMPILE_FAILURE")
}

func checkProgramLinkErrors(program uint32) {
	checkGlError(program, gl.LINK_STATUS, gl.GetProgramiv, gl.GetProgramInfoLog,
		"ERROR::PROGRAM::LINKING_FAILURE")
}

func NewShaderProgram(vertexShaderPath, fragmentShaderPath string) (*ShaderProgram, error) {
	GLContext().check()

	vertexShaderSource, err := LoadFile(vertexShaderPath)

	fragmentShaderSource, err := LoadFile(fragmentShaderPath)

	// Compile the Vertex shader
	vertexShader := gl.CreateShader(gl.VERTEX_SHADER)
	cvertexShaderSource, freeVertexShader := gl.Strs(vertexShaderSource + "\x00")
	defer freeVertexShader()
	gl.ShaderSource(vertexShader, 1, cvertexShaderSource, nil)
	gl.CompileShader(vertexShader)
	checkShaderCompileErrors(vertexShader)

	// Compile the fragment shader
	fragmentShader := gl.CreateShader(gl.FRAGMENT_SHADER)
	cfragmentShaderSource, freeFragmentShader := gl.Strs(fragmentShaderSource + "\x00")
	gl.ShaderSource(fragmentShader, 1, cfragmentShaderSource, nil)
	defer freeFragmentShader()
	gl.CompileShader(fragmentShader)
	checkShaderCompileErrors(fragmentShader)

	// Link the shader program
	program := gl.CreateProgram()
	gl.AttachShader(program, vertexShader)
	gl.AttachShader(program, fragmentShader)
	gl.LinkProgram(program)
	checkProgramLinkErrors(program)

	gl.DeleteShader(vertexShader)
	gl.DeleteShader(fragmentShader)

	return &ShaderProgram{program: program, UniformLocationCache: map[string]uint32{}, AttribLocationCache: map[string]uint32{}}, nil
}

The scene looks like this:

type Scene struct {
	DefaultShaderProgram *ShaderProgram
	Renderer             *ForwardRenderer
	Window               *glfw.Window
	Camera               *Camera
	Objects              []*GameObject
	Lights               []*Light
}

func NewScene(window *glfw.Window) (*Scene, error) {

	width, height := window.GetFramebufferSize()
	gl.Viewport(0, 0, int32(width), int32(height))

	shaderProgram, err := NewShaderProgram("shaders/default.vert", "shaders/default.frag")

	scene := &Scene{
		DefaultShaderProgram: shaderProgram,
		Window:               window,
		Objects:              []*GameObject{},
	}

	return scene, nil
}

func (s *Scene) AddObject(obj *GameObject) {
	obj.Scene = s
	s.Objects = append(s.Objects, obj)
}

func (s *Scene) RemoveObject(obj *GameObject) {
	for i, o := range s.Objects {
		if o.Equals(obj) {
			obj.Scene = nil
			s.Objects = append(s.Objects[:i], s.Objects[i+1:]...)
			break
		}
	}
}

func (s *Scene) Update(dt float32) {
	for _, object := range s.Objects {
		object.Update(dt)
	}
}

func (s *Scene) Render(camera *Camera) {
	// Clear the screen
	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)

	proj := camera.ProjectionMatrix()
	view := camera.ViewMatrix()

	// Loop over all objects and render them
	for _, obj := range s.Objects {
		// Render the object
		obj.Render(proj, view)
	}
}


Camera looks like this:

type Camera struct {
	*GameObject
	Window      *glfw.Window
	Target      mgl32.Vec3
	Up          mgl32.Vec3
	Left        mgl32.Vec3
	AspectRatio float32
	FovY        float32
}

// NewCamera creates a new camera object with the given position, target, up vector and Field of view
func NewCamera(window *glfw.Window, position, target, up mgl32.Vec3) *Camera {

	width, height := window.GetFramebufferSize()
	aspectRatio := float32(width) / float32(height)

	return &Camera{
		Window: window,
		GameObject: &GameObject{
			Position: position,
			Rotation: QuatIdent,
		},
		Target:      target,
		Up:          up,
		Left:        up.Cross(target.Sub(position)).Normalize(),
		AspectRatio: aspectRatio,
		FovY:        45.0,
	}
}

// ViewMatrix returns the view matrix for the camera
func (c *Camera) ViewMatrix() mgl32.Mat4 {
	// Apply rotation to camera position
	position := c.Rotation.Inverse().Rotate(c.Position)
	return mgl32.LookAtV(position, c.Target, c.Up)
}

// ProjectionMatrix returns the projection matrix for the camera
func (c *Camera) ProjectionMatrix() mgl32.Mat4 {
	return mgl32.Perspective(mgl32.DegToRad(c.FovY), c.AspectRatio, 0.1, 100.0)
}



I Make a cube like this:


func NewCube(size int32) *ComplexMesh {

	// Calculate half of the size to simplify vertex calculations
	halfSize := float32(size / 2.0)

	// Define the vertices of the cube
	vertices := []Vertex{
		{-halfSize, -halfSize, halfSize},
		{halfSize, -halfSize, halfSize},
		{halfSize, halfSize, halfSize},
		{-halfSize, halfSize, halfSize},
		{-halfSize, -halfSize, -halfSize},
		{halfSize, -halfSize, -halfSize},
		{halfSize, halfSize, -halfSize},
		{-halfSize, halfSize, -halfSize},
	}

	// Define the texture coordinates of the cube (not used in this case)
	texCoords := []TexCoord{
		{0, 0},
		{1, 0},
		{1, 1},
		{0, 1},
	}

	// Define the normals of the cube (uniformly facing outwards)
	normals := []Normal{
		{0, 0, 1},
		{1, 0, 0},
		{0, 0, -1},
		{-1, 0, 0},
		{0, 1, 0},
		{0, -1, 0},
	}

	// Define the indices of the cube, referencing the vertices, texCoords and normals positions in the other arrays
	indices := []FaceVertex{
		{0, 0, 0}, {1, 0, 0}, {2, 0, 0}, {2, 0, 0}, {3, 0, 0}, {0, 0, 0},
		{1, 0, 1}, {5, 0, 1}, {6, 0, 1}, {6, 0, 1}, {2, 0, 1}, {1, 0, 1},
		{7, 0, 2}, {6, 0, 2}, {5, 0, 2}, {5, 0, 2}, {4, 0, 2}, {7, 0, 2},
		{4, 0, 3}, {0, 0, 3}, {3, 0, 3}, {3, 0, 3}, {7, 0, 3}, {4, 0, 3},
		{4, 0, 4}, {5, 0, 4}, {1, 0, 4}, {1, 0, 4}, {0, 0, 4}, {4, 0, 4},
		{3, 0, 5}, {2, 0, 5}, {6, 0, 5}, {6, 0, 5}, {7, 0, 5}, {3, 0, 5},
	}

	// Create a new ComplexMesh object
	mesh := NewComplexMesh(vertices, texCoords, normals, indices)

	return mesh

}

Complex Mesh has this struct:
type ComplexMesh struct {
	Vao, Vbo, Ebo uint32
	VertexCount   int32
}

NewComplexMesh looks like this:

func NewComplexMesh(vertices []Vertex, texCoords []TexCoord, normals []Normal, indices []FaceVertex) *ComplexMesh {
	var vao, vbo, ebo uint32
	var vertexCount int32

	gl.GenVertexArrays(1, &vao)
	gl.BindVertexArray(vao)

	gl.GenBuffers(1, &vbo)
	gl.BindBuffer(gl.ARRAY_BUFFER, vbo)

	// Interleave vertex data
	var interleavedData []float32
	for _, face := range indices {
		vertex := vertices[face.VertexIndex]
		texCoord := texCoords[face.TexCoordIndex]
		normal := normals[face.NormalIndex]

		interleavedData = append(interleavedData, vertex.X, vertex.Y, vertex.Z)
		interleavedData = append(interleavedData, texCoord.Y, texCoord.V)
		interleavedData = append(interleavedData, normal.X, normal.Y, normal.Z)
	}

	gl.BufferData(gl.ARRAY_BUFFER, len(interleavedData)*4, gl.Ptr(interleavedData), gl.STATIC_DRAW)

	gl.GenBuffers(1, &ebo)
	gl.BindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebo)

	var indicesData []uint32
	for _, face := range indices {
		indicesData = append(indicesData, uint32(face.VertexIndex))
	}

	gl.BufferData(gl.ELEMENT_ARRAY_BUFFER, len(indicesData)*4, gl.Ptr(indicesData), gl.STATIC_DRAW)

	// Position attribute
	gl.EnableVertexAttribArray(0)
	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 8*4, gl.PtrOffset(0))

	// TexCoord attribute
	gl.EnableVertexAttribArray(1)
	gl.VertexAttribPointer(1, 2, gl.FLOAT, false, 8*4, gl.PtrOffset(3*4))

	// Normal attribute
	gl.EnableVertexAttribArray(2)
	gl.VertexAttribPointer(2, 3, gl.FLOAT, false, 8*4, gl.PtrOffset(5*4))

	gl.BindVertexArray(0)

	vertexCount = int32(len(indices))

	return &ComplexMesh{
		Vao:         vao,
		Vbo:         vbo,
		Ebo:         ebo,
		VertexCount: vertexCount,
	}
}

Rendering starts with the scene:

func (s *Scene) Render(camera *Camera) {
	// Clear the screen
	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)

	proj := camera.ProjectionMatrix()
	view := camera.ViewMatrix()

	// Loop over all objects and render them
	for _, obj := range s.Objects {
		// Render the object
		obj.Render(proj, view)
	}
}

GameObject looks like this:
type GameObject struct {
	Position mgl32.Vec3
	Rotation mgl32.Quat
	Velocity mgl32.Vec3
	Scale    float32
	Mass     float32
	Charge   float32
	Fields   []Force
	Material Material
	Mesh     *ComplexMesh
	Scene    *Scene
}

GameObject render looks like this:

func (g *GameObject) Render(projMatrix mgl32.Mat4, viewMatrix mgl32.Mat4) {
	modelMatrix := g.getModelMatrix()

	renderer := *g.Scene.Renderer

	renderer.Render(g.Mesh, g.Material, modelMatrix, projMatrix, viewMatrix)
}

func (g *GameObject) getModelMatrix() mgl32.Mat4 {
	modelMatrix := mgl32.Translate3D(g.Position.X(), g.Position.Y(), g.Position.Z())
	modelMatrix = modelMatrix.Mul4(mgl32.Scale3D(g.Scale, g.Scale, g.Scale))
	modelMatrix = modelMatrix.Mul4(g.Rotation.Mat4())
	return modelMatrix
}


Forward Renderer looks like this:

type ForwardRenderer struct {
	window *glfw.Window
	camera *Camera
}

func NewForwardRenderer(window *glfw.Window, camera *Camera) ForwardRenderer {
	return ForwardRenderer{
		window: window,
		camera: camera,
	}
}

func (fr *ForwardRenderer) Render(mesh *ComplexMesh, material Material, model mgl32.Mat4, proj mgl32.Mat4, view mgl32.Mat4) {
	shaderProgram := material.GetShader()

	shaderProgram.Use()

	// Bind the material properties to the shader program
	if err := material.BindShaderProperties(shaderProgram); err != nil {
		panic(err)
	}

	// Set the model, view, and projection matrices for the shader program
	shaderProgram.SetMat4UniformLocation("model", &model)
	shaderProgram.SetMat4UniformLocation("view", &view)
	shaderProgram.SetMat4UniformLocation("projection", &proj)

	// Bind the mesh data
	gl.BindVertexArray(mesh.Vao)
	gl.DrawElements(gl.TRIANGLES, mesh.VertexCount, gl.UNSIGNED_INT, nil)
	gl.BindVertexArray(0)

	shaderProgram.Unuse()
}


The Fragment Shader looks like this:
#version 410 core

out vec4 FragColor;

in vec3 FragPos;
in vec3 Normal;

uniform vec3 objectColor;

void main()
{
    vec3 lightColor = vec3(1.0, 1.0, 1.0); // Uniform light color
    vec3 lightDirection = normalize(vec3(1.0, 1.0, 1.0)); // Uniform light direction

    // Calculate diffuse lighting
    float diffuse = max(dot(Normal, lightDirection), 0.0);

    // Calculate final color as the object color multiplied by the diffuse lighting factor
    vec3 finalColor = objectColor * diffuse;

    FragColor = vec4(finalColor, 1.0);
}


The Vertex Shader looks like this:
#version 410 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

out vec3 FragPos;
out vec3 Normal;

void main()
{
    gl_Position = projection * view * model * vec4(position, 1.0);
    FragPos = vec3(model * vec4(position, 1.0));
    Normal = mat3(transpose(inverse(model))) * normal;
}



Reply only with the errors and description of how to fix them, do not describe the code.
